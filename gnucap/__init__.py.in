# Copyright (C) 2018 Felix Salfelder
# Author: Felix Salfelder <felix@salfelder.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#---------------------------------------------------------------------
#
from __future__ import print_function

import sys
import ctypes
import os


def trace(*args, **kwargs):
	return
	print(*args, file=sys.stderr, **kwargs)

ctypes.PyDLL("@LIBGNUCAP_SONAME@", mode=ctypes.RTLD_GLOBAL)

oldflags = sys.getdlopenflags()
if(os.name=="posix"):
	# python tries to outsmart us, work around that
	trace("POSIX ON")
	sys.setdlopenflags(oldflags | ctypes.RTLD_GLOBAL)
	trace("PYDDL'd")
else:
	untested()

# BUG: need to import first (why?)
from .u_time_pair import TIME_PAIR

from .gnucap_swig import command, parse
trace("cmd imported")
from .c_comand import CMD, CMD_cmdproc, CMD_command
from .c_exp import eval
from .e_compon import COMPONENT, COMMON_COMPONENT
from .e_base import CKT_BASE_find_wave, CKT_BASE
from .e_elemnt import ELEMENT # HACK
from .e_cardlist import CARD_LIST, findbranch
from .e_node import NODE
from .e_node import node_t, node_array, LOGICVAL
from .e_node import lvSTABLE0, lvSTABLE1, lvFALLING, lvRISING
from .e_card import CARD
from .e_subckt import BASE_SUBCKT

from .m_cpoly import FPOLY1, CPOLY1
from .md import rBATCH, rINTERACTIVE, rPRESET, rPRE_MAIN, rSCRIPT
from .md import ENV
from .m_matrix import BSMATRIXd, BSMATRIXc
from .m_wave import WAVE
from .s__ import SIM_ as SIM
from .u_opt import SET_RUN_MODE, OPT_numdgt, OPT_pivtol
from .u_parameter import PARAMETERd, PARAMETERi, PARAMETERb
from .u_sim_data import SIM_DATA
from .u_xprobe import XPROBE
from .ap import CS
from .ap import mySet as Set_
from .ap import myGet as Get_, Get
from .mode import iTOTAL, moANALOG, moDIGITAL
# from ._io_ import OMSTREAM

from .ap import mNONE, mSCALE, mOFFSET, mINVERT, mPOSITIVE, mOCTAL, mHEX
from .io_trace import *

from ._io_ import OMSTREAM__print, IO_mstdout_get, outset, outreset
from .l_denoise import fixzero
from .l_compar import in_order

_iomstout = IO_mstdout_get()

def out(s):
#	_iomstout.flush()
	sys.stdout.flush()
	_iomstout << s

if(os.name=="posix"):
	sys.setdlopenflags(oldflags)

# this will change
from .globals import install_device, need_default_plugins
from .globals import install_command

from .globals import cvar
device_dispatcher = cvar.device_dispatcher
del cvar

# from .e_node import cvar
# ground_node = cvar.ground_node # does not work. why!?
# del cvar

from .e_node import get_ground_node_, make_node_
ground_node = get_ground_node_()

# BUG? direct import seems broken
from .pending import install as pending_install

# from globals import shared_command_installer as command_installer
sys.stdout.flush()
out("gnucap-python version: @PACKAGE_VERSION@\n")
sys.stdout.flush()

if not "GNUCAP_PLUGPATH" in os.environ:
	os.environ["GNUCAP_PLUGPATH"] = "@GC_PKGLIBDIR@"

if hasattr(sys, 'ps1'):
	run_mode = SET_RUN_MODE(rINTERACTIVE)
else:
	run_mode = SET_RUN_MODE(rBATCH)
	if sys.flags.interactive:
		# what is this?
		trace("... in interactive postmortem mode, incomplete")

try:
	lang = os.environ["GNUCAP_DEFAULT_PLUGINS"]
except:
	default_plugins = "gnucap-default-plugins.so"

try:
	lang = os.environ["GNUCAP_LANG"]
except:
	lang = "acs";

if need_default_plugins():
	# no c_python. likely "import gnucap"
	trace("loading default plugins")
	command("load " + default_plugins)
	command("set lang=" + lang)
else:
	trace("from c_python")
	# calling pythonstuff from c_python?
	pass

#c_python = True

# this is the plan
# for s in simulations:
#	attach_output(s, our_own_sink)

class session:
	def __init__(self):
		self.command=command
	def __del__(self):
		# this is called *before* the library loaded by PyDLL is destroyed.
		self.command("clear")

s = None
if(sys.version_info[0] == 3):
	trace("making session")
	s = session()
else:
	# TODO: don't know how to call clear at the end in python 2.
	# this results in a garbage collector assertion in gnucap (if assertions are active)
	pass

