# python3 only: use importlib

import sys
import ctypes
import os

# python tries to outsmart us, work around that
if(os.name=="posix"):
	flags = sys.getdlopenflags()
	sys.setdlopenflags(flags | ctypes.RTLD_GLOBAL)
	from gnucap_swig import *
	sys.setdlopenflags(flags)
else:
	untested()
	from gnucap_swig import *

# trying to manifest an interface.
# ideally the type names should be the usual ones, wrapper layers must be invisible.
from component import COMPONENT_ as COMPONENT
from e_elemnt import ELEMENT
from gnucap_swig import CARD_LIST
from gnucap_swig import SIM_ as SIM
# from gnucap_swig import DPAIR
# from gnucap_swig import COMPLEX
from m_cpoly import FPOLY1, CPOLY1
from m_wave import WAVE
from e_node import node_t
from c_exp import eval

# this will change
from globals import install_device
from globals import install_command
# from globals import shared_command_installer as command_installer

# TODO: ask gnucap-conf (at configure time)
# BUG: do not override, if set.
os.environ["GNUCAP_PLUGPATH"] = "/usr/local/lib/gnucap"

if hasattr(sys, 'ps1'):
	print("welcome to gnucap-python")
	run_mode = SET_RUN_MODE(rINTERACTIVE)
else:
	run_mode = SET_RUN_MODE(rBATCH)
	if sys.flags.interactive:
		# what is this?
		print("... in interactive postmortem mode, incomplete")

try:
	lang = os.environ["GNUCAP_DEFAULT_PLUGINS"]
except:
	default_plugins = "gnucap-default-plugins.so"

try:
	lang = os.environ["GNUCAP_LANG"]
except:
	lang = "acs";

command("load " + default_plugins)
command("set lang=" + lang)

# this is the plan
# for s in simulations:
#	attach_output(s, our_own_sink)
