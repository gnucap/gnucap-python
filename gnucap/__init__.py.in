# python3 only: use importlib

import sys
import ctypes
import os

oldflags = sys.getdlopenflags()
if(os.name=="posix"):
	# python tries to outsmart us, work around that
	sys.setdlopenflags(oldflags | ctypes.RTLD_GLOBAL)
else:
	untested()

from .gnucap_swig import command, parse
from .c_comand import CMD, CMD_cmdproc, CMD_command
from .c_exp import eval
from .component import COMPONENT_ as COMPONENT
from .e_base import CKT_BASE_find_wave, CKT_BASE
from .e_cardlist import CARD_LIST
from .e_elemnt import ELEMENT
from .e_node import node_t
from .m_cpoly import FPOLY1, CPOLY1
from .md import rBATCH, rINTERACTIVE, rPRESET, rPRE_MAIN, rSCRIPT
from .md import ENV
from .m_matrix import BSMATRIXd, BSMATRIXc
from .m_wave import WAVE
from .s__ import SIM_ as SIM
from .u_opt import SET_RUN_MODE
from .u_sim_data import SIM_DATA

if(os.name=="posix"):
	sys.setdlopenflags(oldflags)

# this will change
from .globals import install_device
from .globals import install_command
# from globals import shared_command_installer as command_installer

if not "GNUCAP_PLUGPATH" in os.environ:
	os.environ["GNUCAP_PLUGPATH"] = "@GC_PKGLIBDIR@"

if hasattr(sys, 'ps1'):
	print("welcome to gnucap-python")
	run_mode = SET_RUN_MODE(rINTERACTIVE)
else:
	run_mode = SET_RUN_MODE(rBATCH)
	if sys.flags.interactive:
		# what is this?
		print("... in interactive postmortem mode, incomplete")

try:
	lang = os.environ["GNUCAP_DEFAULT_PLUGINS"]
except:
	default_plugins = "gnucap-default-plugins.so"

try:
	lang = os.environ["GNUCAP_LANG"]
except:
	lang = "acs";

command("load " + default_plugins)
command("set lang=" + lang)

# this is the plan
# for s in simulations:
#	attach_output(s, our_own_sink)
